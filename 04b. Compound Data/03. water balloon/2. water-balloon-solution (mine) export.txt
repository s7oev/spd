;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-reader.ss" "lang")((modname |2. water-balloon-solution (mine) export|) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
(require 2htdp/image)
(require 2htdp/universe)

; PROBLEM:
; 
; In this problem, we will design an animation of throwing a water balloon.  
; When the program starts the water balloon should appear on the left side 
; of the screen, half-way up.  Since the balloon was thrown, it should 
; fly across the screen, rotating in a clockwise fashion. Pressing the 
; space key should cause the program to start over with the water balloon
; back at the left side of the screen. 
; 
; NOTE: Please include your domain analysis at the top in a comment box. 
; 
; Use the following images to assist you with your domain analysis:
; 
; 
; 1)
; 2).
; .
; 3)
; .
; 4)
; 
; .
;     
; 
; Here is an image of the water balloon:
; (define WATER-BALLOON.)
; 
; 
; 
; NOTE: The rotate function wants an angle in degrees as its first 
; argument. By that it means Number[0, 360). As time goes by your balloon 
; may end up spinning more than once, for example, you may get to a point 
; where it has spun 362 degrees, which rotate won't accept. 
; 
; The solution to that is to use the modulo function as follows:
; 
; (rotate (modulo ... 360) (text "hello" 30 "black"))
; 
; where ... should be replaced by the number of degrees to rotate.
; 
; NOTE: It is possible to design this program with simple atomic data, 
; but we would like you to use compound data.


;; Domain analysis

; .
; Constants:
; Width
; Height
; MTS
; CTR-Y
; Balloon image
; Velocity
; Rotation speed
; .
; ...
; .
; Changing:
; Balloon rotation angle
; Balloon position (CTR-X)
; .
; Big-bang options:
; on-tick
; to-draw
; on-key


;; A balloon moving across the screen while rotating

;; =================
;; Constants:

(define WIDTH  600)
(define HEIGHT 300)

(define MTS (empty-scene WIDTH HEIGHT))

(define CTR-Y (/ HEIGHT 2))
(define BALLOON-IMG.)

(define VELOCITY     1)
(define ROT-SPEED (- 1))  ;negative for clock-wise, positive for counter-clock-wise



;; =================
;; Data definitions:

(define-struct balloon (x a))
;; Balloon is (make-balloon Integer Integer)
;; interp. a ballon at position x rotated at an angle a

(define BALLOON-1 (make-balloon 0 0))

#;
(define (fn-for-balloon b)
  (... (balloon-x b)    ;Integer
       (balloon-a b)))  ;Integer

;; Template rules used:
;;  - compound: 2 fields



;; =================
;; Functions:

;; Balloon -> Balloon
;; start the world with (main (make-balloon 0 0)) 
(define (main b)
  (big-bang b                            ; Balloon
            (on-tick   next-balloon)     ; Balloon -> Balloon
            (to-draw   render-balloon)   ; Balloon -> Image
            (on-key    handle-key)))     ; Balloon KeyEvent -> Balloon

;; Balloon -> Balloon
;; produce the next balloon
(check-expect (next-balloon BALLOON-1)
              (make-balloon VELOCITY ROT-SPEED))  ;BALLOON-1 starts at position 0, rotated at 0 degrees

(check-expect (next-balloon (make-balloon 50 50))
              (make-balloon (+ 50 VELOCITY) (+ 50 ROT-SPEED)))

;(define (next-balloon b) b) ;stub

;<template from Balloon>
(define (next-balloon b)
  (make-balloon (+ (balloon-x b) VELOCITY)
                (+ (balloon-a b) ROT-SPEED)))


;; Balloon -> Image
;; render an image of the current balloon
(check-expect (render-balloon BALLOON-1)
              (place-image (rotate-balloon BALLOON-1) 0 CTR-Y MTS))
(check-expect (render-balloon (make-balloon 50 50))
              (place-image (rotate-balloon (make-balloon 50 50)) 50 CTR-Y MTS))

;(define (render-balloon b) MTS) ;stub

;<template from Balloon>
(define (render-balloon b)
  (place-image (rotate-balloon b)
               (balloon-x b) CTR-Y
               MTS))

;; Balloon -> Image
;; produce a rotated image of a balloon
(check-expect (rotate-balloon BALLOON-1)
              (rotate (modulo 0 360) BALLOON-IMG))

(check-expect (rotate-balloon (make-balloon 50 50))
              (rotate (modulo 50 360) BALLOON-IMG))

(check-expect (rotate-balloon (make-balloon 400 400))
              (rotate (modulo 400 360) BALLOON-IMG))

;(define (rotate-balloon b) BALLOON-IMG) ;stub

;<template from Balloon>
(define (rotate-balloon b)
  (rotate (modulo (balloon-a b) 360) BALLOON-IMG))

;; Balloon KeyEvent -> Balloon
;; restart balloon's initial position and angle on space press
(check-expect (handle-key BALLOON-1 " ")            BALLOON-1)
(check-expect (handle-key BALLOON-1 "a")            BALLOON-1)
(check-expect (handle-key (make-balloon 50 50) " ") BALLOON-1)
(check-expect (handle-key (make-balloon 50 50) "a") (make-balloon 50 50))

;(define (handle-key b ke) b)   ;stub

 ;<template from HandleKey)
(define (handle-key b ke)
  (cond [(key=? ke " ") (make-balloon 0 0)]
        [else b]))



