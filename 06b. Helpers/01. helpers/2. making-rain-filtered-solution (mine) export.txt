;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-reader.ss" "lang")((modname |2. making-rain-filtered-solution (mine) export|) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
(require 2htdp/image)
(require 2htdp/universe)

;; making-rain-filtered-starter.rkt

; 
; PROBLEM:
; 
; Design a simple interactive animation of rain falling down a screen. Wherever we click,
; a rain drop should be created and as time goes by it should fall. Over time the drops
; will reach the bottom of the screen and "fall off". You should filter these excess
; drops out of the world state - otherwise your program is continuing to tick and
; and draw them long after they are invisible.
; 
; In your design pay particular attention to the helper rules. In our solution we use
; these rules to split out helpers:
;   - function composition
;   - reference
;   - knowledge domain shift
;   
;   
; NOTE: This is a fairly long problem.  While you should be getting more comfortable with 
; world problems there is still a fair amount of work to do here. Our solution has 9
; functions including main. If you find it is taking you too long then jump ahead to the
; next homework problem and finish this later.
; 
; 


;; Make it rain where we want it to.

;; =================
;; Constants:

(define WIDTH  300)
(define HEIGHT 300)

(define SPEED 1)

(define DROP (ellipse 4 8 "solid" "blue"))

(define MTS (rectangle WIDTH HEIGHT "solid" "light blue"))

;; =================
;; Data definitions:

(define-struct drop (x y))
;; Drop is (make-drop Integer Integer)
;; interp. A raindrop on the screen, with x and y coordinates.

(define D1 (make-drop 10 30))

#;
(define (fn-for-drop d)
  (... (drop-x d) 
       (drop-y d)))

;; Template Rules used:
;; - compound: 2 fields


;; ListOfDrop is one of:
;;  - empty
;;  - (cons Drop ListOfDrop)
;; interp. a list of drops

(define LOD1 empty)
(define LOD2 (cons (make-drop 10 20) (cons (make-drop 3 6) empty)))
(define LOD3 (cons (make-drop 10 20) (cons (make-drop 3 HEIGHT) empty)))
(define LOD4 (cons (make-drop 3 HEIGHT) (cons (make-drop 10 20) empty)))

#;
(define (fn-for-lod lod)
  (cond [(empty? lod) (...)]
        [else
         (... (fn-for-drop (first lod))
              (fn-for-lod (rest lod)))]))

;; Template Rules used:
;; - one-of: 2 cases
;; - atomic distinct: empty
;; - compound: (cons Drop ListOfDrop)
;; - reference: (first lod) is Drop
;; - self reference: (rest lod) is ListOfDrop

;; =================
;; Functions:

;; ListOfDrop -> ListOfDrop
;; start rain program by evaluating (main empty)
(define (main lod)
  (big-bang lod
    (on-mouse handle-mouse)   ; ListOfDrop Integer Integer MouseEvent -> ListOfDrop
    (on-tick  next-drops)     ; ListOfDrop -> ListOfDrop
    (to-draw  render-drops))) ; ListOfDrop -> Image


;; ListOfDrop Integer Integer MouseEvent -> ListOfDrop
;; if mevt is "button-down" add a new drop at that position
(check-expect (handle-mouse LOD1 20 20 "button-down")
              (cons (make-drop 20 20) empty))
(check-expect (handle-mouse LOD1 20 20 "button-up")
              empty)
(check-expect (handle-mouse LOD2 30 30 "button-down")
              (cons (make-drop 30 30) LOD2))

;(define (handle-mouse lod x y mevt) empty) ; stub

(define (handle-mouse lod x y mevt)
  (cond [(mouse=? mevt "button-down") (cons (make-drop x y) lod)]
        [else lod]))


;; ListOfDrop -> ListOfDrop
;; produce filtered and ticked list of drops
;(define (next-drops lod) empty) ; stub
(check-expect (next-drops LOD1) empty)

(check-expect (next-drops LOD2)
              (cons (make-drop 10 (+ 20 SPEED))
                    (cons (make-drop 3 (+ 6 SPEED)) empty)))

(check-expect (next-drops LOD3)
              (cons (make-drop 10 (+ 20 SPEED)) empty))

(check-expect (next-drops LOD4)
              (cons (make-drop 10 (+ 20 SPEED)) empty))

(define (next-drops lod)
  (ticked-list (filtered-list lod)))


;; ListOfDrop -> ListOfDrop
;; produce drops that have moved their position with SPEED pixels
(check-expect (ticked-list LOD1) empty)
(check-expect (ticked-list LOD2)
              (cons (make-drop 10 (+ 20 SPEED))
                    (cons (make-drop 3 (+ 6 SPEED)) empty)))

;(define (ticked-list lod) lod) ; stub

(define (ticked-list lod)
  (cond [(empty? lod) empty]
        [else
         (cons (move-drop (first lod))
               (ticked-list (rest lod)))]))

;; Drop -> Drop
;; move a single drop with SPEED pixels
(check-expect (move-drop D1) (make-drop 10 (+ 30 SPEED)))

;(define (move-drop d) d) ; stub

(define (move-drop d)
  (make-drop (drop-x d) 
             (+ (drop-y d) SPEED)))


;; ListOfDrop -> ListOfDrop
;; filter the list of drop to only contain the active drops
(check-expect (filtered-list LOD1) empty)
(check-expect (filtered-list LOD2) LOD2)

(check-expect (filtered-list LOD3)
              (cons (make-drop 10 20) empty))
(check-expect (filtered-list LOD4)
              (cons (make-drop 10 20) empty))

;(define (filtered-list lod) lod) ; stub

(define (filtered-list lod)
  (cond [(empty? lod) empty]
        [else
         (if (filter-drop? (first lod))
             (filtered-list (rest lod))
             (cons (first lod)
                   (filtered-list (rest lod))))]))


;; Drop -> Boolean
;; produce true if the drop is currently on the edge and thus it needs to be filtered
(check-expect (filter-drop? (make-drop 10 20)) false)
(check-expect (filter-drop? (make-drop 10 HEIGHT)) true)
;; the test below is only needed if SPEED is changed to be bigger than 1
(check-expect (filter-drop? (make-drop 10 (+ 1 HEIGHT))) true)

;(define (filter-drop? d) false) ; stub

(define (filter-drop? d)
  (>= (drop-y d) HEIGHT)) ; > added to support changing SPEED to be bigger than 1


;; ListOfDrop -> Image
;; Render the drops onto MTS
(check-expect (render-drops LOD1) MTS)
(check-expect (render-drops LOD2)
              (place-image
               DROP 10 20
               (place-image
                DROP 3 6
                MTS)))

;(define (render-drops lod) MTS) ; stub

(define (render-drops lod)
  (cond [(empty? lod) MTS]
        [else
         (place-image DROP (drop-x (first lod)) (drop-y (first lod))
                      (render-drops (rest lod)))]))