;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-reader.ss" "lang")((modname |2. traffic-light-solution (mine) export|) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
(require 2htdp/image)
(require 2htdp/universe)

;; traffic-light-starter.rkt

; 
; PROBLEM:
; 
; Design an animation of a traffic light. 
; 
; Your program should show a traffic light that is red, then green, 
; then yellow, then red etc. For this program, your changing world 
; state data definition should be an enumeration.
; 
; Here is what your program might look like if the initial world 
; state was the red traffic light:
; .
; Next:
; .
; Next:
; .
; Next is red, and so on.
; 
; To make your lights change at a reasonable speed, you can use the 
; rate option to on-tick. If you say, for example, (on-tick next-color 1) 
; then big-bang will wait 1 second between calls to next-color.
; 
; Remember to follow the HtDW recipe! Be sure to do a proper domain 
; analysis before starting to work on the code file.
; 
; Note: If you want to design a slightly simpler version of the program,
; you can modify it to display a single circle that changes color, rather
; than three stacked circles. 
; 


(require 2htdp/image)
(require 2htdp/universe)

;; Traffic light's different states

;; =================
;; Constants:

(define WIDTH   60)
(define HEIGHT 150)

(define CTR-X (/ WIDTH  2))
(define CTR-Y (/ HEIGHT 2))

(define C-SIZE   20)
(define C1-COLOR "red")
(define C2-COLOR "yellow")
(define C3-COLOR "green")

(define MARGIN 5)

(define MTS (empty-scene WIDTH HEIGHT "black"))

;; =================
;; Data definitions:

;; ActiveLight is one of:
;;   - "red"
;;   - "yellow"
;;   - "green"
;; interp. the current light shown

;; <examples are redundant for enumerations>

#;
(define (fn-for-active-light al)
  (cond [(string=? "red" al)    (...)]
        [(string=? "yellow" al) (...)]
        [(string=? "green" al)  (...)]))

;; Template rules used:
;;  - one of: 3 cases
;;  - atomic distinct: "red"
;;  - atomic distinct: "yellow"
;;  - atomic distinct: "green"



;; =================
;; Functions:

;; ActiveLight -> ActiveLight
;; start the world with initial light, for example: (main "red")
;; 
(define (main al)
  (big-bang al                           ; ActiveLight
            (on-tick   next-light 1)     ; ActiveLight -> ActiveLight
            (to-draw   render)))         ; ActiveLight -> Image
;; ActiveLight -> ActiveLight
;; produce the next light

;(define (next-light al) "red") ;stub

(check-expect (next-light "red")    "green")
(check-expect (next-light "green")  "yellow")
(check-expect (next-light "yellow") "red")

;<template from ActiveLight>
(define (next-light al)
  (cond [(string=? "red" al)    "green"]
        [(string=? "yellow" al) "red"]
        [(string=? "green" al)  "yellow"]))


;; ActiveLight -> Image
;; render an MTS with 3 circles with constant x, y positions,
;;    constant color and changing mode

;(define (render al) MTS)

(check-expect
 (render "red")
 (place-image (above (circle C-SIZE "solid"   C1-COLOR)
                     (square MARGIN "solid"   "black") ;margin
                     (circle C-SIZE "outline" C2-COLOR)
                     (square MARGIN "solid"   "black") ;margin
                     (circle C-SIZE "outline" C3-COLOR))
              CTR-X CTR-Y
              MTS))

(check-expect
 (render "green")
 (place-image (above (circle C-SIZE "outline" C1-COLOR)
                     (square MARGIN "solid"   "black") ;margin
                     (circle C-SIZE "outline" C2-COLOR)
                     (square MARGIN "solid"   "black") ;margin
                     (circle C-SIZE "solid"   C3-COLOR))
              CTR-X CTR-Y
              MTS))

(check-expect
 (render "yellow")
 (place-image (above (circle C-SIZE "outline" C1-COLOR)
                     (square MARGIN "solid"   "black") ;margin
                     (circle C-SIZE "solid"   C2-COLOR)
                     (square MARGIN "solid"   "black") ;margin
                     (circle C-SIZE "outline" C3-COLOR))
              CTR-X CTR-Y
              MTS))

;<template from ActiveLight>
(define (render al)
  (cond [(string=? "red" al)
         (place-image
          (above (circle C-SIZE "solid"   C1-COLOR)
                 (square MARGIN "solid"   "black") ;margin
                 (circle C-SIZE "outline" C2-COLOR)
                 (square MARGIN "solid"   "black") ;margin
                 (circle C-SIZE "outline" C3-COLOR))
          CTR-X CTR-Y
          MTS)]
        [(string=? "yellow" al)
         (place-image
          (above (circle C-SIZE "outline" C1-COLOR)
                 (square MARGIN "solid"   "black") ;margin
                 (circle C-SIZE "solid"   C2-COLOR)
                 (square MARGIN "solid"   "black") ;margin
                 (circle C-SIZE "outline" C3-COLOR))
          CTR-X CTR-Y
          MTS)]
        [(string=? "green" al)
         (place-image
          (above (circle C-SIZE "outline" C1-COLOR)
                 (square MARGIN "solid"   "black") ;margin
                 (circle C-SIZE "outline" C2-COLOR)
                 (square MARGIN "solid"   "black") ;margin
                 (circle C-SIZE "solid"   C3-COLOR))
          CTR-X CTR-Y
          MTS)]))