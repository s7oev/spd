;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-reader.ss" "lang")((modname |2. image-list-solution (mine) export|) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
(require 2htdp/image)

;; image-list-starter.rkt

;; =================
;; Constants:
; 
; Here I define images that will be subsequently used in the program. They are
; defined here for enhanced readability


(define IMG-1 (square 20 "solid" "green"))
(define IMG-2 (circle 17 "solid" "red"))

;; Data definitions:

; 
; PROBLEM A:
; 
; Design a data definition to represent a list of images. Call it ListOfImage. 
; 


;; ListOfImage is one of:
;;  - empty
;;  - (cons Image ListOfImage)
;; interp. a list of images

(define LOI-1 empty)
(define LOI-2 (cons IMG-1 empty))
(define LOI-3 (cons IMG-2 (cons IMG-1 empty)))

#;
(define (fn-for-loi loi)
  (cond [(empty? loi) (...)]                    ;BASE CASE
        [else (... (first loi)                  ;String
                   (fn-for-loi (rest loi)))]))  ;NATURAL RECURSION

;; Template rules used:
;;  - one of: 2 cases
;;  - atomic distinct: empty
;;  - compound data: (cons Image ListOfImage)
;;  - self-reference: (rest loi) is ListOfImage

;; =================
;; Functions:

; 
; PROBLEM B:
; 
; Design a function that consumes a list of images and produces a number 
; that is the sum of the areas of each image. For area, just use the image's 
; width times its height.
; 


;; ListOfImage -> Number
;; Produce sum of areas of all images
(check-expect (sum-area empty) 0)

(check-expect (sum-area LOI-2)
              (* (image-width IMG-1) (image-height IMG-1)))

(check-expect (sum-area LOI-3)
              (+ (* (image-width IMG-2) (image-height IMG-2))
                 (* (image-width IMG-1) (image-height IMG-1))))


;(define (sum-area loi) 0)  ;stub

;<template from ListOfImage>
(define (sum-area loi)
  (cond [(empty? loi) 0]                  
        [else (+ (* (image-width (first loi))
                    (image-height (first loi)))
                 (sum-area (rest loi)))]))
