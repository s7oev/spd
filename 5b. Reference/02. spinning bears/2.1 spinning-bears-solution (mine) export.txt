;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-reader.ss" "lang")((modname |2.1 spinning-bears-solution (mine) export|) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
;; spinning-bears-starter.rkt

(require 2htdp/image)
(require 2htdp/universe)

; PROBLEM:
; 
; In this problem you will design another world program. In this program the changing 
; information will be more complex - your type definitions will involve arbitrary 
; sized data as well as the reference rule and compound data. But by doing your 
; design in two phases you will be able to manage this complexity. As a whole, this problem 
; will represent an excellent summary of the material covered so far in the course, and world 
; programs in particular.
; 
; This world is about spinning bears. The world will start with an empty screen. Clicking
; anywhere on the screen will cause a bear to appear at that spot. The bear starts out upright,
; but then rotates counterclockwise at a constant speed. Each time the mouse is clicked on the 
; screen, a new upright bear appears and starts spinning.
; 
; So each bear has its own x and y position, as well as its angle of rotation. And there are an
; arbitrary amount of bears.
; ----------------------------- THIS FILE HAS THIS PART : -------------------------------------
; To start, design a world that has only one spinning bear. Initially, the world will start
; with one bear spinning in the center at the screen. Clicking the mouse at a spot on the
; world will replace the old bear with a new bear at the new spot. You can do this part 
; with only material up through compound.
; ---------------------------------------------------------------------------------------------
; 
; Once this is working you should expand the program to include an arbitrary number of bears.
; 
; Here is an image of a bear for you to use: .


(require 2htdp/image)
(require 2htdp/universe)

;; Create a bear on mouse click position that contiuously spins counterclockwise
;; at a constant speed


;; =================
;; Constants:

(define WIDTH  600)
(define HEIGHT 600)

(define MTS (rectangle WIDTH HEIGHT "solid" "white"))

(define BEAR-IMG .)

(define BEAR-SPEED 10)

;; =================
;; Data definitions:

(define-struct bear (x y angle))
;; Bear is (make-bear Number Number Integer)
;; interp. a bear at position x, y rotated at angle degrees

(define BEAR-1 (make-bear (/ WIDTH 2) (/ HEIGHT 2) 0)) ;starting bear
(define BEAR-2 (make-bear 100 200 -180))

#;
(define (fn-for-bear b)
  (... (bear-x b)            ;Number
       (bear-y b)            ;Number
       (bear-angle b)))      ;Integer  

;; Template rules used:
;;  - compound: 3 fields

;; =================
;; Functions:

;; Bear -> Bear
;; start the world with (main BEAR-1)
(define (main b)
  (big-bang b                         ;Bear
            (on-tick   rotate-bear)   ;Bear -> Bear
            (to-draw   render-bear)   ;Bear -> Image
            (on-mouse  new-bear)))    ;Bear Integer Integer MouseEvent -> Bear

;; Bear -> Bear
;; produce the next rotated bear
(check-expect (rotate-bear (make-bear 0 0 0))
              (make-bear 0 0 (+ BEAR-SPEED 0)))

(check-expect (rotate-bear (make-bear 0 0 360))
              (make-bear 0 0 (+ BEAR-SPEED 360)))

;(define (rotate-bear b) b) ;stub

;<template from Bear>
(define (rotate-bear b)
  (make-bear (bear-x b) (bear-y b)
             (+ BEAR-SPEED (bear-angle b))))


;; Bear -> Image
;; render the current bear; modulo of -360 is used to ensure counterclockwise
;; rotation; can be changed to 360 (i.e., to positive) for clockwise
(check-expect (render-bear BEAR-1)
              (place-image BEAR-IMG (/ WIDTH 2) (/ HEIGHT 2) MTS))

(check-expect (render-bear BEAR-2)
              (place-image (rotate -180 BEAR-IMG) 100 200 MTS))

(check-expect (render-bear (make-bear 100 200 -400))
              (place-image (rotate (modulo -400 -360) BEAR-IMG) 100 200 MTS))

;(define (render-bear b) MTS)  ;stub

;<template from Bear>
(define (render-bear b)
  (place-image (rotate (modulo (bear-angle b) -360) BEAR-IMG)
               (bear-x b) (bear-y b)
               MTS))

;; Bear Integer Integer MouseEvent -> Bear
;; create a new bear on mouse click at MouseEvent location
(check-expect (new-bear BEAR-1 324 247 "button-down")
              (make-bear 324 247 0))
(check-expect (new-bear BEAR-1 324 247 "drag") BEAR-1)

;(define (new-bear b x y me) BEAR-1)  ;stub

;<template from MouseEvent>
(define (new-bear b x y me)
  (cond [(mouse=? me "button-down") (make-bear x y 0)]
        [else b]))
