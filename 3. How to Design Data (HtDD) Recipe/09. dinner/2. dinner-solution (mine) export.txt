;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-reader.ss" "lang")((modname |2. dinner-solution (mine) export|) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))

;; dinner-starter.rkt

;; =================
;; Data definitions:

; 
; PROBLEM A:
; 
; You are working on a system that will automate delivery for 
; YesItCanFly! airlines catering service. 
; There are three dinner options for each passenger, chicken, pasta 
; or no dinner at all. 
; 
; Design a data definition to represent a dinner order. Call the type 
; DinnerOrder.
; 


;; DinnerOrder is one of:
;;  - "chicken"
;;  - "pasta"
;;  false

;; interp. "chicken" or "pasta" are the choices for dinner, false means no dinner

(define D1 "chicken")
(define D2 "pasta")
(define D3 false)

#;
(define (fn-for-dinner-order d)
  (cond [(and (string? d)
              (string=? "chicken" d))
         (...)]
        [(and (string? d)
              (string=? "pasta" d))
         (...)]
        [else
         (...)]))

;; Template rules used:
;;  - one of: 3 cases
;;  - atomic distinct: "chicken"
;;  - atomic distinct: "pasta"
;;  - atomic distinct: false

;; =================
;; Functions:

; 
; PROBLEM B:
; 
; Design the function dinner-order-to-msg that consumes a dinner order 
; and produces a message for the flight attendants saying what the
; passenger ordered. 
; 
; For example, calling dinner-order-to-msg for a chicken dinner would
; produce "The passenger ordered chicken."
; 


;; Signature: DinnerOrder -> String
;; Purpose:   produce a message for flight attendants with passenger's 
;;            order or informing them in the case of no order

;; Stub:
;(define (dinner-order-to-msg d) "foo")

;; Tests and examples:
(check-expect (dinner-order-to-msg "chicken") "The passenger ordered chicken.")
(check-expect (dinner-order-to-msg "pasta") "The passenger ordered pasta.")
(check-expect (dinner-order-to-msg false) "The passenger does not want dinner.")

;; <template from DinnerOrder>
;; Body:
(define (dinner-order-to-msg d)
  (cond [(and (string? d)
              (string=? "chicken" d))
         "The passenger ordered chicken."]
        [(and (string? d)
              (string=? "pasta" d))
         "The passenger ordered pasta."]
        [else
         "The passenger does not want dinner."]))